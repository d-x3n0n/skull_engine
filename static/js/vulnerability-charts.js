// vulnerability-charts.js
class VulnerabilityCharts {
    constructor() {
        this.charts = {};
        this.colors = {
            critical: '#dc3545',
            high: '#fd7e14', 
            medium: '#ffc107',
            low: '#20c997',
            unknown: '#6c757d'
        };
        this.vulnerabilityData = null;
    }

    initCharts() {
        console.log("üîç Initializing vulnerability charts...");
        this.initSeverityChart();
        this.initCVEBySeverityChart();
        this.initAgentsChart();
        this.initPackagesChart();
    }

    initSeverityChart() {
        const ctx = document.getElementById('severityChart');
        if (!ctx) {
            console.warn("‚ö†Ô∏è Severity chart canvas not found");
            return;
        }

        this.charts.severity = new Chart(ctx.getContext('2d'), {
            type: 'doughnut',
            data: {
                labels: ['Critical', 'High', 'Medium', 'Low'],
                datasets: [{
                    data: [0, 0, 0, 0],
                    backgroundColor: [
                        this.colors.critical,
                        this.colors.high,
                        this.colors.medium,
                        this.colors.low
                    ],
                    borderWidth: 2,
                    borderColor: '#1a1a1a'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            color: '#e0e0e0',
                            font: {
                                size: 11
                            },
                            generateLabels: function(chart) {
                                const data = chart.data;
                                if (data.labels.length && data.datasets.length) {
                                    return data.labels.map((label, i) => {
                                        const value = data.datasets[0].data[i];
                                        return {
                                            text: `${label}: ${value} vulnerabilities`,
                                            fillStyle: data.datasets[0].backgroundColor[i],
                                            hidden: false,
                                            index: i
                                        };
                                    });
                                }
                                return [];
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.raw || 0;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                                return `${label}: ${value} vulnerabilities (${percentage}%)`;
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: 'Vulnerability Count by Severity Level',
                        color: '#e0e0e0',
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    }
                }
            }
        });
    }

    initCVEBySeverityChart() {
        const ctx = document.getElementById('cveChart');
        if (!ctx) {
            console.warn("‚ö†Ô∏è CVE chart canvas not found");
            return;
        }

        this.charts.cveBySeverity = new Chart(ctx.getContext('2d'), {
            type: 'bar',
            data: {
                labels: ['Critical', 'High', 'Medium', 'Low'],
                datasets: [{
                    label: 'Number of Vulnerabilities',
                    data: [0, 0, 0, 0],
                    backgroundColor: [
                        this.colors.critical,
                        this.colors.high,
                        this.colors.medium,
                        this.colors.low
                    ],
                    borderColor: [
                        this.colors.critical,
                        this.colors.high,
                        this.colors.medium,
                        this.colors.low
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `Vulnerabilities: ${context.raw}`;
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: 'Vulnerability Distribution by Severity Level',
                        color: '#e0e0e0',
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#e0e0e0',
                            precision: 0
                        },
                        grid: {
                            color: 'rgba(255,255,255,0.1)'
                        },
                        title: {
                            display: true,
                            text: 'Number of Vulnerabilities',
                            color: '#e0e0e0'
                        }
                    },
                    x: {
                        ticks: {
                            color: '#e0e0e0'
                        },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }

    initAgentsChart() {
        const ctx = document.getElementById('agentsChart');
        if (!ctx) {
            console.warn("‚ö†Ô∏è Agents chart canvas not found");
            return;
        }

        this.charts.agents = new Chart(ctx.getContext('2d'), {
            type: 'bar',
            data: {
                labels: [],
                datasets: [{
                    label: 'Vulnerability Count',
                    data: [],
                    backgroundColor: this.colors.high,
                    borderColor: this.colors.high,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                indexAxis: 'y',
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            title: function(context) {
                                return `Agent: ${context[0].label}`;
                            },
                            label: function(context) {
                                return `Vulnerability Count: ${context.raw}`;
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: 'Vulnerability Count by Agent',
                        color: '#e0e0e0',
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true,
                        ticks: {
                            color: '#e0e0e0',
                            precision: 0
                        },
                        grid: {
                            color: 'rgba(255,255,255,0.1)'
                        },
                        title: {
                            display: true,
                            text: 'Number of Vulnerabilities',
                            color: '#e0e0e0'
                        }
                    },
                    y: {
                        ticks: {
                            color: '#e0e0e0'
                        },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }

    initPackagesChart() {
        const ctx = document.getElementById('packagesChart');
        if (!ctx) {
            console.warn("‚ö†Ô∏è Packages chart canvas not found");
            return;
        }

        this.charts.packages = new Chart(ctx.getContext('2d'), {
            type: 'bar',
            data: {
                labels: [],
                datasets: [{
                    label: 'Vulnerability Count',
                    data: [],
                    backgroundColor: this.colors.medium,
                    borderColor: this.colors.medium,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                indexAxis: 'y',
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            title: function(context) {
                                return `Package: ${context[0].label}`;
                            },
                            label: function(context) {
                                return `Vulnerability Count: ${context.raw}`;
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: 'Vulnerability Count by Package',
                        color: '#e0e0e0',
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true,
                        ticks: {
                            color: '#e0e0e0',
                            precision: 0
                        },
                        grid: {
                            color: 'rgba(255,255,255,0.1)'
                        },
                        title: {
                            display: true,
                            text: 'Number of Vulnerabilities',
                            color: '#e0e0e0'
                        }
                    },
                    y: {
                        ticks: {
                            color: '#e0e0e0'
                        },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }

    updateCharts(chartsData, vulnerabilityData = null) {
        console.log("üîç Updating vulnerability charts...");
        console.log("üìä Charts data:", chartsData);
        console.log("üìä Vulnerability data count:", vulnerabilityData?.length || 0);
        
        if (!vulnerabilityData || vulnerabilityData.length === 0) {
            console.warn("‚ö†Ô∏è No vulnerability data provided for charts");
            this.updateEmptyCharts();
            return;
        }

        this.vulnerabilityData = vulnerabilityData;
        
        // Use vulnerability data for total counts instead of unique CVE counts
        this.updateSeverityChartWithTotalCounts(vulnerabilityData);
        this.updateCVEBySeverityChartWithTotalCounts(vulnerabilityData);
        this.updateAgentsChartWithTotalCounts(vulnerabilityData);
        this.updatePackagesChartWithTotalCounts(vulnerabilityData);
        
        console.log("‚úÖ All charts updated with total vulnerability counts");
    }

    // New method to count total vulnerabilities by severity
    updateSeverityChartWithTotalCounts(vulnerabilityData) {
        if (!this.charts.severity || !vulnerabilityData) {
            console.warn("‚ö†Ô∏è Severity chart not initialized or no data");
            return;
        }
        
        console.log("üìä Updating severity chart with total counts from", vulnerabilityData.length, "vulnerabilities");
        
        // Count total vulnerabilities by severity
        const severityCounts = {
            critical: 0,
            high: 0,
            medium: 0,
            low: 0,
            unknown: 0
        };
        
        vulnerabilityData.forEach(vuln => {
            const severity = (vuln.severity || 'unknown').toLowerCase();
            if (severityCounts.hasOwnProperty(severity)) {
                severityCounts[severity]++;
            } else {
                severityCounts.unknown++;
            }
        });
        
        const data = [
            severityCounts.critical || 0,
            severityCounts.high || 0,
            severityCounts.medium || 0,
            severityCounts.low || 0
        ];
        
        const totalVulnerabilities = data.reduce((sum, count) => sum + count, 0);
        
        this.charts.severity.data.datasets[0].data = data;
        
        // Update labels to show total counts
        this.charts.severity.data.labels = [
            `Critical: ${data[0]}`,
            `High: ${data[1]}`,
            `Medium: ${data[2]}`,
            `Low: ${data[3]}`
        ];
        
        this.charts.severity.update();
        console.log(`‚úÖ Severity chart updated - Total: ${totalVulnerabilities} vulnerabilities`, severityCounts);
    }

    // New method for bar chart with total counts
    updateCVEBySeverityChartWithTotalCounts(vulnerabilityData) {
        if (!this.charts.cveBySeverity || !vulnerabilityData) {
            console.warn("‚ö†Ô∏è CVE by Severity chart not initialized or no data");
            return;
        }
        
        console.log("üìä Updating CVE by Severity chart with total counts");
        
        // Count total vulnerabilities by severity
        const severityCounts = {
            critical: 0,
            high: 0, 
            medium: 0,
            low: 0,
            unknown: 0
        };
        
        vulnerabilityData.forEach(vuln => {
            const severity = (vuln.severity || 'unknown').toLowerCase();
            if (severityCounts.hasOwnProperty(severity)) {
                severityCounts[severity]++;
            } else {
                severityCounts.unknown++;
            }
        });
        
        const data = [
            severityCounts.critical || 0,
            severityCounts.high || 0,
            severityCounts.medium || 0,
            severityCounts.low || 0
        ];
        
        this.charts.cveBySeverity.data.datasets[0].data = data;
        this.charts.cveBySeverity.update();
        
        console.log(`‚úÖ CVE by Severity chart updated with total counts - Critical: ${data[0]}, High: ${data[1]}, Medium: ${data[2]}, Low: ${data[3]}`);
    }

    // Updated agents chart to use vulnerability data
    updateAgentsChartWithTotalCounts(vulnerabilityData) {
        if (!this.charts.agents || !vulnerabilityData) {
            console.warn("‚ö†Ô∏è Agents chart not initialized or no data");
            return;
        }
        
        console.log("üìä Updating agents chart with total counts");
        
        // Count vulnerabilities by agent
        const agentCounts = {};
        
        vulnerabilityData.forEach(vuln => {
            const agentName = vuln.agent_name || 'Unknown Agent';
            agentCounts[agentName] = (agentCounts[agentName] || 0) + 1;
        });
        
        const entries = Object.entries(agentCounts);
        const sortedEntries = entries.sort((a, b) => b[1] - a[1]).slice(0, 10);
        
        const labels = sortedEntries.map(entry => entry[0]);
        const data = sortedEntries.map(entry => entry[1]);
        
        this.charts.agents.data.labels = labels;
        this.charts.agents.data.datasets[0].data = data;
        
        this.charts.agents.update();
        console.log(`‚úÖ Agents chart updated - Showing ${labels.length} agents with total vulnerability counts`);
    }

    // Updated packages chart to use vulnerability data
    updatePackagesChartWithTotalCounts(vulnerabilityData) {
        if (!this.charts.packages || !vulnerabilityData) {
            console.warn("‚ö†Ô∏è Packages chart not initialized or no data");
            return;
        }
        
        console.log("üìä Updating packages chart with total counts");
        
        // Count vulnerabilities by package
        const packageCounts = {};
        
        vulnerabilityData.forEach(vuln => {
            const packageName = vuln.package_name || 'Unknown Package';
            packageCounts[packageName] = (packageCounts[packageName] || 0) + 1;
        });
        
        const entries = Object.entries(packageCounts);
        const sortedEntries = entries.sort((a, b) => b[1] - a[1]).slice(0, 10);
        
        const labels = sortedEntries.map(entry => entry[0]);
        const data = sortedEntries.map(entry => entry[1]);
        
        this.charts.packages.data.labels = labels;
        this.charts.packages.data.datasets[0].data = data;
        
        this.charts.packages.update();
        console.log(`‚úÖ Packages chart updated - Showing ${labels.length} packages with total vulnerability counts`);
    }

    updateEmptyCharts() {
        console.log("üîÑ Updating charts with empty data");
        
        if (this.charts.severity) {
            this.charts.severity.data.datasets[0].data = [0, 0, 0, 0];
            this.charts.severity.data.labels = ['Critical: 0', 'High: 0', 'Medium: 0', 'Low: 0'];
            this.charts.severity.update();
        }
        
        if (this.charts.cveBySeverity) {
            this.charts.cveBySeverity.data.datasets[0].data = [0, 0, 0, 0];
            this.charts.cveBySeverity.update();
        }
        
        if (this.charts.agents) {
            this.charts.agents.data.labels = ['No data'];
            this.charts.agents.data.datasets[0].data = [0];
            this.charts.agents.update();
        }
        
        if (this.charts.packages) {
            this.charts.packages.data.labels = ['No data'];
            this.charts.packages.data.datasets[0].data = [0];
            this.charts.packages.update();
        }
    }

    // Method to handle chart resizing on window resize
    handleResize() {
        Object.values(this.charts).forEach(chart => {
            if (chart) {
                chart.resize();
            }
        });
    }

    // Method to destroy all charts (for cleanup)
    destroyCharts() {
        Object.values(this.charts).forEach(chart => {
            if (chart) {
                chart.destroy();
            }
        });
        this.charts = {};
    }
}

// Initialize charts when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log("üöÄ Vulnerability Charts DOM loaded, initializing...");
    try {
        window.vulnerabilityCharts = new VulnerabilityCharts();
        window.vulnerabilityCharts.initCharts();
        console.log("‚úÖ Vulnerability Charts initialized successfully");
        
        // Add resize event listener
        window.addEventListener('resize', () => {
            if (window.vulnerabilityCharts) {
                window.vulnerabilityCharts.handleResize();
            }
        });
        
    } catch (error) {
        console.error("‚ùå Vulnerability Charts initialization failed:", error);
    }
});

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = VulnerabilityCharts;
}
