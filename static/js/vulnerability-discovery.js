// vulnerability-app.js
class VulnerabilityDashboard {
    constructor() {
        this.currentPage = 1;
        this.itemsPerPage = 25;
        this.currentData = [];
        this.filteredData = [];
        this.sortField = 'timestamp';
        this.sortDirection = 'desc';
        this.currentFilters = {};
        
        this.init();
    }

    init() {
        console.log("üîç Vulnerability Dashboard initializing...");
        this.bindEvents();
        this.loadVulnerabilityData();
    }

    async loadVulnerabilityData() {
        console.log("üîç Loading Vulnerability data...");
        this.showLoading();
        
        try {
            // First load summary to get the counts
            await this.loadSummaryData();
            
            // Then load the main vulnerability data
            const params = new URLSearchParams({
                page: this.currentPage,
                per_page: this.itemsPerPage
            });
            
            // Add current filters
            if (this.currentFilters.severity) {
                params.append('severity', this.currentFilters.severity);
            }
            if (this.currentFilters.agent_id) {
                params.append('agent_id', this.currentFilters.agent_id);
            }
            if (this.currentFilters.search) {
                params.append('search', this.currentFilters.search);
            }
            
            const response = await fetch(`/api/vulnerabilities?${params}`);
            console.log("üîç Vulnerability API Response status:", response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ Vulnerability Data loaded:', data);
            console.log('üìä Vulnerabilities count:', data.vulnerabilities?.length || 0);
            console.log('üìà Summary:', data.summary);
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            this.currentData = data.vulnerabilities || [];
            this.updateAgentFilter();
            this.applyFilters();
            this.updateLastUpdate();
            
            // DEBUG: Check if charts object exists
            console.log("üîç Checking charts availability...");
            console.log("üìä window.vulnerabilityCharts:", window.vulnerabilityCharts);
            console.log("üìä data.vulnerabilities length:", data.vulnerabilities?.length);
            
            // Initialize charts if available - PASS VULNERABILITY DATA FOR TOTAL COUNTS
            if (window.vulnerabilityCharts && data.vulnerabilities && data.vulnerabilities.length > 0) {
                console.log("üîç Initializing vulnerability charts with", data.vulnerabilities.length, "vulnerabilities...");
                window.vulnerabilityCharts.updateCharts(data.charts, data.vulnerabilities);
            } else {
                console.warn("‚ö†Ô∏è Charts not updated. Reason:", {
                    chartsAvailable: !!window.vulnerabilityCharts,
                    hasVulnerabilityData: !!(data.vulnerabilities && data.vulnerabilities.length > 0)
                });
            }
            
            // Update critical vulnerabilities section
            this.updateCriticalVulnerabilities(data.critical_high_vulnerabilities || []);
            
        } catch (error) {
            console.error('‚ùå Error loading Vulnerability data:', error);
            this.showError('Failed to load vulnerability data: ' + error.message);
            this.currentData = [];
            this.updateSummaryMetrics({
                total_vulnerabilities: 0,
                critical_vulnerabilities: 0,
                high_vulnerabilities: 0,
                affected_agents: 0,
                risk_score: 0,
                last_scan: 'Never'
            });
            this.applyFilters();
        } finally {
            this.hideLoading();
        }
    }

    async loadSummaryData() {
        try {
            const response = await fetch('/api/vulnerabilities/summary');
            const data = await response.json();
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            console.log('üìä Summary data loaded:', data.summary);
            this.updateSummaryMetrics(data.summary);
            
        } catch (error) {
            console.error('‚ùå Error loading summary data:', error);
            // Don't show error to user for summary, just use zeros
            this.updateSummaryMetrics({
                total_vulnerabilities: 0,
                critical_vulnerabilities: 0,
                high_vulnerabilities: 0,
                affected_agents: 0,
                risk_score: 0,
                last_scan: 'Never'
            });
        }
    }

    updateSummaryMetrics(summary) {
        console.log("üîç Updating summary metrics:", summary);
        
        // Update the main metrics cards
        const metrics = {
            'totalVulnerabilities': summary.total_vulnerabilities || 0,
            'criticalVulnerabilities': summary.critical_vulnerabilities || 0,
            'highVulnerabilities': summary.high_vulnerabilities || 0,
            'affectedAgents': summary.affected_agents || 0,
            'riskScore': summary.risk_score || 0,
            'lastScan': summary.last_scan || 'Never'
        };

        // Update values with proper formatting
        document.getElementById('totalVulnerabilities').textContent = this.formatNumber(metrics.totalVulnerabilities);
        document.getElementById('criticalVulnerabilities').textContent = this.formatNumber(metrics.criticalVulnerabilities);
        document.getElementById('highVulnerabilities').textContent = this.formatNumber(metrics.highVulnerabilities);
        document.getElementById('affectedAgents').textContent = this.formatNumber(metrics.affectedAgents);
        document.getElementById('riskScore').textContent = `${metrics.riskScore}%`;
        document.getElementById('lastScan').textContent = metrics.lastScan;

        // Update trends (you can implement actual trend calculation later)
        this.updateTrends(metrics);
    }

    formatNumber(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    updateTrends(metrics) {
        // Simple trend calculation - you can enhance this with real data later
        const trends = {
            'totalVulnsTrend': metrics.totalVulnerabilities > 0 ? '+0%' : '+0%',
            'criticalTrend': metrics.criticalVulnerabilities > 0 ? '+0%' : '+0%',
            'highTrend': metrics.highVulnerabilities > 0 ? '+0%' : '+0%',
            'agentsTrend': metrics.affectedAgents > 0 ? '+0%' : '+0%',
            'riskTrend': metrics.riskScore > 0 ? '+0%' : '+0%'
        };

        // Update trend elements
        Object.entries(trends).forEach(([key, value]) => {
            const element = document.getElementById(key);
            if (element) {
                element.textContent = value;
                
                // Add color coding based on trend
                if (value.startsWith('+')) {
                    element.style.color = '#ef4444'; // red for increase
                } else if (value.startsWith('-')) {
                    element.style.color = '#10b981'; // green for decrease
                } else {
                    element.style.color = '#6b7280'; // gray for no change
                }
            }
        });
    }

    bindEvents() {
        console.log("üîç Binding Vulnerability events...");
        
        // Refresh button
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                console.log("üîç Refresh button clicked");
                this.loadVulnerabilityData();
            });
        }

        // Search input
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            let searchTimeout;
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    console.log("üîç Search filter applied:", e.target.value);
                    this.currentFilters.search = e.target.value;
                    this.loadVulnerabilityData();
                }, 500);
            });
        }

        // Severity filter
        const severityFilter = document.getElementById('severityFilter');
        if (severityFilter) {
            severityFilter.addEventListener('change', (e) => {
                console.log("üîç Severity filter:", e.target.value);
                this.currentFilters.severity = e.target.value;
                this.loadVulnerabilityData();
            });
        }

        // Agent filter
        const agentFilter = document.getElementById('agentFilter');
        if (agentFilter) {
            agentFilter.addEventListener('change', (e) => {
                console.log("üîç Agent filter:", e.target.value);
                this.currentFilters.agent_id = e.target.value;
                this.loadVulnerabilityData();
            });
        }

        // Time range filter
        const timeRangeFilter = document.getElementById('timeRangeFilter');
        if (timeRangeFilter) {
            timeRangeFilter.addEventListener('change', (e) => {
                console.log("üîç Time range filter:", e.target.value);
                if (e.target.value === 'custom') {
                    document.getElementById('customDateRange').style.display = 'block';
                } else {
                    document.getElementById('customDateRange').style.display = 'none';
                    this.loadVulnerabilityData();
                }
            });
        }

        // Pagination
        document.getElementById('firstPage')?.addEventListener('click', () => this.goToPage(1));
        document.getElementById('prevPage')?.addEventListener('click', () => this.goToPage(this.currentPage - 1));
        document.getElementById('nextPage')?.addEventListener('click', () => this.goToPage(this.currentPage + 1));
        document.getElementById('lastPage')?.addEventListener('click', () => this.goToLastPage());

        // Table sorting
        document.querySelectorAll('th[data-sort]').forEach(th => {
            th.addEventListener('click', () => {
                const field = th.getAttribute('data-sort');
                console.log("üîç Sorting by:", field);
                this.sortTable(field);
            });
        });
        
        // Export button
        const exportBtn = document.getElementById('exportBtn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                this.exportVulnerabilities();
            });
        }
        
        // Modal close button - FIXED
        const closeModal = document.getElementById('closeModal');
        if (closeModal) {
            // Remove any existing listeners and add fresh one
            closeModal.replaceWith(closeModal.cloneNode(true));
            const newCloseModal = document.getElementById('closeModal');
            newCloseModal.addEventListener('click', () => {
                console.log("üîç Close modal clicked");
                this.closeModal();
            });
        }

        console.log("‚úÖ Vulnerability events bound successfully");
    }

    updateAgentFilter() {
        const agentFilter = document.getElementById('agentFilter');
        if (!agentFilter) return;

        const agents = [...new Set(this.currentData.map(vuln => vuln.agent_name))].sort();
        console.log("üîç Available agents with vulnerabilities:", agents);
        
        agentFilter.innerHTML = '<option value="">All Agents</option>' +
            agents.map(agent => `<option value="${agent}" ${this.currentFilters.agent_id === agent ? 'selected' : ''}>${agent}</option>`).join('');
    }

    applyFilters() {
        console.log("üîç Applying vulnerability filters...");
        let filtered = [...this.currentData];
        
        const searchTerm = (this.currentFilters?.search || '').toLowerCase();
        
        // Client-side filtering only for search (server handles severity and agent)
        if (searchTerm) {
            filtered = filtered.filter(vuln => 
                (vuln.cve_id && vuln.cve_id.toLowerCase().includes(searchTerm)) ||
                (vuln.title && vuln.title.toLowerCase().includes(searchTerm)) ||
                (vuln.package_name && vuln.package_name.toLowerCase().includes(searchTerm)) ||
                (vuln.agent_name && vuln.agent_name.toLowerCase().includes(searchTerm))
            );
            console.log(`üîç Search filter "${searchTerm}": ${filtered.length} vulnerabilities`);
        }
        
        this.filteredData = filtered;
        this.currentPage = 1;
        this.renderTable();
        this.updatePagination();
        
        console.log(`‚úÖ Vulnerability filters applied: ${filtered.length} vulnerabilities`);
    }

    renderTable() {
        const tbody = document.getElementById('vulnTableBody');
        if (!tbody) {
            console.error("‚ùå Vulnerability table body not found");
            return;
        }

        if (this.filteredData.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="8" class="no-data">
                        <i class="fas fa-search"></i>
                        ${this.currentData.length === 0 
                            ? 'No vulnerabilities found. Check if Wazuh vulnerability scanning is enabled.' 
                            : 'No vulnerabilities match your filters.'}
                    </td>
                </tr>
            `;
            return;
        }

        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const pageData = this.filteredData.slice(startIndex, startIndex + this.itemsPerPage);

        tbody.innerHTML = pageData.map(vuln => `
            <tr class="vulnerability-row" data-vuln-id="${vuln.id}">
                <td>
                    <div class="timestamp-cell">
                        <div class="timestamp-date">${this.formatDate(vuln.timestamp)}</div>
                        <div class="timestamp-time">${this.formatTime(vuln.timestamp)}</div>
                    </div>
                </td>
                <td>
                    <span class="cve-id">${vuln.cve_id || 'N/A'}</span>
                </td>
                <td>
                    <span class="severity-badge severity-${vuln.severity ? vuln.severity.toLowerCase() : 'unknown'}">
                        ${vuln.severity || 'Unknown'}
                    </span>
                </td>
                <td>
                    <div class="agent-cell">
                        <i class="fas fa-server"></i>
                        ${vuln.agent_name || 'Unknown Agent'}
                    </div>
                </td>
                <td>
                    <div class="package-cell">
                        <div class="package-name">${vuln.package_name || 'N/A'}</div>
                        <div class="package-version">${vuln.package_version || ''}</div>
                    </div>
                </td>
                <td>
                    <div class="score-cell">
                        <div class="cvss-score">${vuln.cvss_score || 'N/A'}</div>
                        ${vuln.cvss_score ? `<div class="score-bar" style="width: ${(vuln.cvss_score / 10) * 100}%"></div>` : ''}
                    </div>
                </td>
                <td>
                    <span class="status-badge status-${vuln.status ? vuln.status.toLowerCase() : 'active'}">
                        ${vuln.status || 'Active'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-outline btn-sm" onclick="vulnerabilityDashboard.showVulnerabilityDetails('${vuln.id}')">
                        <i class="fas fa-search"></i> Details
                    </button>
                </td>
            </tr>
        `).join('');
    }

    updateCriticalVulnerabilities(criticalVulns) {
        const container = document.getElementById('criticalVulns');
        if (!container) {
            console.warn("‚ö†Ô∏è Critical vulnerabilities container not found");
            return;
        }

        if (criticalVulns.length === 0) {
            container.innerHTML = '<div class="no-data">No critical or high vulnerabilities found</div>';
            return;
        }

        let html = '';
        criticalVulns.slice(0, 10).forEach(vuln => {
            html += `
                <div class="critical-vuln-item" data-vuln-id="${vuln.id}">
                    <div class="vuln-severity-badge severity-${vuln.severity ? vuln.severity.toLowerCase() : 'unknown'}">
                        ${vuln.severity || 'Unknown'}
                    </div>
                    <div class="vuln-details">
                        <div class="vuln-title">${vuln.cve_id || 'N/A'}: ${vuln.title || 'No title'}</div>
                        <div class="vuln-meta">
                            <span class="vuln-agent"><i class="fas fa-server"></i> ${vuln.agent_name || 'Unknown Agent'}</span>
                            <span class="vuln-package"><i class="fas fa-cube"></i> ${vuln.package_name || 'N/A'}</span>
                            <span class="vuln-score"><i class="fas fa-chart-line"></i> CVSS: ${vuln.cvss_score || 'N/A'}</span>
                        </div>
                    </div>
                    <button class="btn btn-outline btn-sm" onclick="vulnerabilityDashboard.showVulnerabilityDetails('${vuln.id}')">
                        <i class="fas fa-search"></i> Details
                    </button>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    formatDate(timestamp) {
        if (!timestamp) return 'N/A';
        return new Date(timestamp).toLocaleDateString();
    }

    formatTime(timestamp) {
        if (!timestamp) return 'N/A';
        return new Date(timestamp).toLocaleTimeString();
    }

    updatePagination() {
        const totalPages = Math.ceil(this.filteredData.length / this.itemsPerPage);
        const paginationInfo = document.getElementById('tablePaginationInfo');
        const startItem = (this.currentPage - 1) * this.itemsPerPage + 1;
        const endItem = Math.min(this.currentPage * this.itemsPerPage, this.filteredData.length);

        if (paginationInfo) {
            paginationInfo.textContent = `Page ${this.currentPage} of ${totalPages}`;
        }

        // Update pagination info
        const paginationInfoTop = document.getElementById('paginationInfo');
        if (paginationInfoTop) {
            paginationInfoTop.textContent = `Showing ${startItem}-${endItem} of ${this.filteredData.length} vulnerabilities`;
        }

        // Update pagination buttons
        document.getElementById('firstPage').disabled = this.currentPage === 1;
        document.getElementById('prevPage').disabled = this.currentPage === 1;
        document.getElementById('nextPage').disabled = this.currentPage === totalPages;
        document.getElementById('lastPage').disabled = this.currentPage === totalPages;

        // Update page numbers
        this.updatePageNumbers(totalPages);
    }

    updatePageNumbers(totalPages) {
        const pageNumbers = document.getElementById('pageNumbers');
        if (!pageNumbers) return;

        let pagesHtml = '';
        
        for (let i = 1; i <= totalPages; i++) {
            if (i === this.currentPage) {
                pagesHtml += `<span class="page-number active">${i}</span>`;
            } else {
                pagesHtml += `<span class="page-number">${i}</span>`;
            }
        }
        
        pageNumbers.innerHTML = pagesHtml;

        // Add click events to page numbers
        pageNumbers.querySelectorAll('.page-number').forEach((page, index) => {
            if (!page.classList.contains('active')) {
                page.addEventListener('click', () => this.goToPage(index + 1));
            }
        });
    }

    goToPage(page) {
        const totalPages = Math.ceil(this.filteredData.length / this.itemsPerPage);
        if (page >= 1 && page <= totalPages) {
            this.currentPage = page;
            this.renderTable();
            this.updatePagination();
            
            // Scroll to top of table
            document.querySelector('.alerts-section').scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }
    }

    goToLastPage() {
        const totalPages = Math.ceil(this.filteredData.length / this.itemsPerPage);
        this.goToPage(totalPages);
    }

    sortTable(field) {
        if (this.sortField === field) {
            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            this.sortField = field;
            this.sortDirection = 'desc';
        }

        this.filteredData.sort((a, b) => {
            let aValue = a[field];
            let bValue = b[field];

            if (field === 'timestamp' || field === 'detected_at') {
                aValue = new Date(aValue);
                bValue = new Date(bValue);
            }

            if (field === 'cvss_score') {
                aValue = parseFloat(aValue) || 0;
                bValue = parseFloat(bValue) || 0;
            }

            if (this.sortDirection === 'asc') {
                return aValue > bValue ? 1 : -1;
            } else {
                return aValue < bValue ? 1 : -1;
            }
        });

        this.renderTable();
    }

    async showVulnerabilityDetails(vulnId) {
        console.log("üîç Showing vulnerability details:", vulnId);
        
        try {
            // Show loading state in modal
            this.showVulnerabilityModal({ loading: true });
            
            const response = await fetch(`/api/vulnerabilities/${vulnId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const vuln = await response.json();
            console.log("üìä Vulnerability details loaded:", vuln);
            this.showVulnerabilityModal(vuln);
            
        } catch (error) {
            console.error('‚ùå Error loading vulnerability details:', error);
            this.showVulnerabilityModal({ 
                error: true, 
                message: 'Failed to load vulnerability details: ' + error.message 
            });
        }
    }

    showVulnerabilityModal(vuln) {
        const modal = document.getElementById('alertModal');
        const content = document.getElementById('modalContent');
        
        if (!modal || !content) {
            console.error("‚ùå Modal elements not found");
            return;
        }
        
        // Set content based on data
        if (vuln.loading) {
            content.innerHTML = '<div class="no-data">Loading vulnerability details...</div>';
        } else if (vuln.error) {
            content.innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>Error Loading Details</h4>
                    <p>${vuln.message || 'Unknown error occurred'}</p>
                    <button class="btn btn-primary" onclick="vulnerabilityDashboard.closeModal()">Close</button>
                </div>
            `;
        } else {
            content.innerHTML = this.createVulnerabilityDetailContent(vuln);
        }
        
        // Show modal
        modal.classList.remove('hidden');
        
        // Add click outside to close
        this.setupModalCloseHandlers();
    }

    setupModalCloseHandlers() {
        const modal = document.getElementById('alertModal');
        const closeBtn = document.getElementById('closeModal');
        
        if (!modal || !closeBtn) {
            console.error("‚ùå Modal close elements not found");
            return;
        }
        
        // Remove existing event listeners to avoid duplicates
        closeBtn.replaceWith(closeBtn.cloneNode(true));
        
        // Get new reference after clone
        const newCloseBtn = document.getElementById('closeModal');
        
        // Add close button event
        newCloseBtn.addEventListener('click', () => {
            this.closeModal();
        });
        
        // Add click outside to close
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeModal();
            }
        });
        
        // Add escape key to close
        const escapeHandler = (e) => {
            if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
                this.closeModal();
            }
        };
        document.addEventListener('keydown', escapeHandler);
        
        // Store handler for cleanup
        this.escapeHandler = escapeHandler;
    }

    createVulnerabilityDetailContent(vuln) {
        const severityClass = this.getSeverityClass(vuln.severity);
        const timestamp = vuln.timestamp ? new Date(vuln.timestamp).toLocaleString() : 'N/A';
        const detectedAt = vuln.detected_at ? new Date(vuln.detected_at).toLocaleString() : 'N/A';
        const publishedAt = vuln.published_at ? new Date(vuln.published_at).toLocaleString() : 'N/A';
        
        return `
            <div class="alert-detail-grid">
                <div class="detail-card">
                    <h4 class="detail-card-title">CVE Information</h4>
                    <div class="detail-item">
                        <div class="detail-label">CVE ID</div>
                        <div class="detail-value font-mono">${this.escapeHtml(vuln.cve_id || 'N/A')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Title</div>
                        <div class="detail-value">${this.escapeHtml(vuln.title || 'No title available')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Description</div>
                        <div class="detail-value description-text">${this.escapeHtml(vuln.description || 'No description available')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Severity</div>
                        <div class="detail-value">
                            <span class="severity-badge ${severityClass}">
                                ${vuln.severity || 'Unknown'}
                            </span>
                        </div>
                    </div>
                </div>
                
                <div class="detail-card">
                    <h4 class="detail-card-title">CVSS Scores</h4>
                    <div class="detail-item">
                        <div class="detail-label">CVSS Score</div>
                        <div class="detail-value">${vuln.cvss_score || 'N/A'}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">CVSS Version</div>
                        <div class="detail-value">${vuln.cvss_version || 'N/A'}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Status</div>
                        <div class="detail-value">
                            <span class="status-badge status-${vuln.status ? vuln.status.toLowerCase() : 'active'}">
                                ${vuln.status || 'Active'}
                            </span>
                        </div>
                    </div>
                </div>
                
                <div class="detail-card">
                    <h4 class="detail-card-title">Package Information</h4>
                    <div class="detail-item">
                        <div class="detail-label">Package Name</div>
                        <div class="detail-value">${this.escapeHtml(vuln.package_name || 'N/A')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Version</div>
                        <div class="detail-value font-mono">${this.escapeHtml(vuln.package_version || 'N/A')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Architecture</div>
                        <div class="detail-value">${this.escapeHtml(vuln.package_architecture || 'N/A')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Installation Path</div>
                        <div class="detail-value font-mono">${this.escapeHtml(vuln.package_path || 'N/A')}</div>
                    </div>
                </div>
                
                <div class="detail-card">
                    <h4 class="detail-card-title">Agent Information</h4>
                    <div class="detail-item">
                        <div class="detail-label">Agent Name</div>
                        <div class="detail-value">${this.escapeHtml(vuln.agent_name || 'Unknown Agent')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Agent IP</div>
                        <div class="detail-value">${this.escapeHtml(vuln.agent_ip || 'N/A')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Agent Version</div>
                        <div class="detail-value">${this.escapeHtml(vuln.agent_version || 'N/A')}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Operating System</div>
                        <div class="detail-value">${this.escapeHtml(vuln.os_name || 'N/A')} ${this.escapeHtml(vuln.os_version || '')}</div>
                    </div>
                </div>
                
                <div class="detail-card">
                    <h4 class="detail-card-title">Timeline</h4>
                    <div class="detail-item">
                        <div class="detail-label">Detected At</div>
                        <div class="detail-value">${detectedAt}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Published At</div>
                        <div class="detail-value">${publishedAt}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Last Updated</div>
                        <div class="detail-value">${timestamp}</div>
                    </div>
                </div>
                
                ${vuln.reference ? `
                <div class="detail-card">
                    <h4 class="detail-card-title">References</h4>
                    <div class="detail-item">
                        <div class="detail-label">Reference URL</div>
                        <div class="detail-value">
                            <a href="${vuln.reference}" target="_blank" class="reference-link">
                                ${vuln.reference.length > 50 ? vuln.reference.substring(0, 50) + '...' : vuln.reference}
                            </a>
                        </div>
                    </div>
                </div>
                ` : ''}
                
                <div class="modal-actions">
                    <button class="btn btn-primary" onclick="vulnerabilityDashboard.closeModal()">
                        <i class="fas fa-times"></i> Close
                    </button>
                </div>
            </div>
        `;
    }

    getSeverityClass(severity) {
        if (!severity) return 'severity-unknown';
        
        const severityMap = {
            'critical': 'severity-critical',
            'high': 'severity-high', 
            'medium': 'severity-medium',
            'low': 'severity-low'
        };
        return severityMap[severity.toLowerCase()] || 'severity-unknown';
    }

    closeModal() {
        const modal = document.getElementById('alertModal');
        if (modal) {
            modal.classList.add('hidden');
        }
        
        // Clean up event listeners
        if (this.escapeHandler) {
            document.removeEventListener('keydown', this.escapeHandler);
            this.escapeHandler = null;
        }
    }

    async exportVulnerabilities() {
        try {
            console.log("üîç Exporting vulnerabilities...");
            const response = await fetch('/api/vulnerabilities/export');
            if (!response.ok) {
                throw new Error(`Export failed: ${response.status}`);
            }
            
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'vulnerabilities_export.csv';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            console.log("‚úÖ Export completed successfully");
        } catch (error) {
            console.error('‚ùå Export error:', error);
            this.showError('Failed to export vulnerabilities: ' + error.message);
        }
    }

    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    showLoading() {
        const loading = document.getElementById('loadingOverlay');
        if (loading) loading.classList.remove('hidden');
    }

    hideLoading() {
        const loading = document.getElementById('loadingOverlay');
        if (loading) loading.classList.add('hidden');
    }

    showError(message) {
        console.error('‚ùå Vulnerability Dashboard Error:', message);
        alert('Error: ' + message);
    }

    updateLastUpdate() {
        const lastUpdate = document.getElementById('lastUpdate');
        if (lastUpdate) {
            const now = new Date();
            const timeString = `Last updated: ${now.toLocaleTimeString()}`;
            lastUpdate.querySelector('span').textContent = timeString;
        }
    }

    // NEW METHOD: Force refresh charts manually
    forceRefreshCharts() {
        console.log("üîÑ Force refreshing charts...");
        if (window.vulnerabilityCharts && this.currentData.length > 0) {
            console.log("üìä Force updating charts with", this.currentData.length, "vulnerabilities");
            window.vulnerabilityCharts.updateCharts({}, this.currentData);
        }
    }
}

// Initialize the dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log("üöÄ Vulnerability Dashboard DOM loaded, initializing...");
    try {
        window.vulnerabilityDashboard = new VulnerabilityDashboard();
        console.log("‚úÖ Vulnerability Dashboard initialized successfully");
        
        // Add manual refresh button for debugging
        const manualRefreshBtn = document.createElement('button');
        manualRefreshBtn.textContent = 'üîÑ Debug Charts';
        manualRefreshBtn.style.position = 'fixed';
        manualRefreshBtn.style.top = '10px';
        manualRefreshBtn.style.right = '10px';
        manualRefreshBtn.style.zIndex = '10000';
        manualRefreshBtn.style.padding = '5px 10px';
        manualRefreshBtn.style.backgroundColor = '#ff4444';
        manualRefreshBtn.style.color = 'white';
        manualRefreshBtn.style.border = 'none';
        manualRefreshBtn.style.borderRadius = '3px';
        manualRefreshBtn.style.cursor = 'pointer';
        manualRefreshBtn.addEventListener('click', () => {
            if (window.vulnerabilityDashboard) {
                window.vulnerabilityDashboard.forceRefreshCharts();
            }
        });
        document.body.appendChild(manualRefreshBtn);
        
    } catch (error) {
        console.error("‚ùå Vulnerability Dashboard initialization failed:", error);
    }
});
